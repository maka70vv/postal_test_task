version: "3.8"

services:
  postal:
    image: ${POSTAL_IMAGE}
    restart: always
    depends_on:
      - mariadb
      - rabbitmq
    entrypoint: ["/docker-entrypoint.sh"]
    command: ["postal", "web-server", "--bind=0.0.0.0"]
    volumes:
      - "./docker/config:/config"
    environment:
      POSTAL_SIGNING_KEY_PATH: /config/signing.key
      MAIN_DB_HOST: ${POSTAL_DB_HOST}
      MAIN_DB_USERNAME: ${POSTAL_DB_USERNAME}
      MAIN_DB_PASSWORD: ${POSTAL_DB_PASSWORD}
      MESSAGE_DB_HOST: ${POSTAL_RABBITMQ_HOST}
      MESSAGE_DB_USERNAME: ${POSTAL_RABBITMQ_USERNAME}
      MESSAGE_DB_PASSWORD: ${POSTAL_RABBITMQ_PASSWORD}
      RAILS_ENVIRONMENT: production
      WAIT_FOR_TIMEOUT: 60
      WAIT_FOR_TARGETS: |
        mariadb:3306
        rabbitmq:5672
    ports:
      - "5000:5000"
      - "2525:2525"
    networks:
      - postal-network

  mariadb:
    image: mariadb:10.6
    restart: always
    environment:
      MARIADB_DATABASE: ${MYSQL_DATABASE}
      MARIADB_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MARIADB_USER: ${MYSQL_USER}
      MARIADB_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - postal-network

  rabbitmq:
    image: rabbitmq:3.11-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - postal-network

  nginx-test:
    image: nginx:alpine
    container_name: postal-nginx-test
    restart: always
    depends_on:
      - postal
    volumes:
      - ./nginx-test/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
      - postal-network

  #  nginx:
  #    image: nginx:alpine
  #    restart: always
  #    depends_on:
  #      - postal
  #    ports:
  #      - "80:80"
  #      - "443:443"
  #    volumes:
  #      - ./nginx/nginx.conf:/etc/nginx/nginx.conf/nginx.conf:ro
  #      - ./nginx/ssl:/var/www/certbot
  #      - /etc/letsencrypt:/etc/letsencrypt
  #
  #  certbot:
  #    image: certbot/certbot
  #    volumes:
  #      - /etc/letsencrypt:/etc/letsencrypt
  #      - ./nginx/ssl:/var/www/certbot
  #    entrypoint: >
  #      sh -c "certbot certonly --webroot -w /var/www/certbot
  #             -d ${DOMAIN}
  #             --email ${EMAIL} --agree-tos --non-interactive"

volumes:
  mysql_data:
  rabbitmq_data:

networks:
  postal-network:
    driver: bridge
